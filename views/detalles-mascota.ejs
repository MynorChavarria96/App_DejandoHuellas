<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalles de la Mascota</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <style>
        form input[type=date] {
            width: 100% !important;
        }

        form input[type=number] {
            height: 46px !important;
            padding: 10px !important;
        }

        .form-select {
            height: 46px !important;
        }

        .modal-content {
            max-width: 1220px !important;
        }

        .img-fluid {
            max-width: 100%;
            height: auto;
        }

        @media (min-width: 768px) {
            .modal-lg-custom {
                max-width: 80%;
            }
        }
    </style>
</head>

<body>
    <div class="container-fluid px-0 px-md-5">
        <div class="card">
            <div class="m-2 col-md-3">
                <a href="/mias-mascotas" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Volver
                </a>
            </div>
            <h1 class="text-center mb-4">Detalles de la Mascota</h1>
            <div class="card-body px-md-5 px-lg-6">
                <div id="mascotaDetalles" class="row">
                    <!-- Los detalles de la mascota se cargarán aquí -->
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="registroModal" tabindex="-1" aria-labelledby="registroModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-lg-custom">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="registroModalLabel">Editar Mascota</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="regForm" method="post">
                        <h4>Datos de la Mascota</h4>
                        <div class="row mb-3">
                            <div class="col-md-7">
                                <label for="nombre_mascota" class="form-label">Nombre</label>
                                <input type="text" class="form-control" maxlength="50" id="nombre_mascota"
                                    name="nombre_mascota" required>
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-4">
                                <label for="raza" class="form-label">Raza</label>
                                <input type="text" class="form-control" id="raza" name="raza">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <label for="fecha_nacimiento" class="form-label">Fecha de Nacimiento</label>
                                <input type="date" class="form-control" id="fecha_nacimiento" name="fecha_nacimiento"
                                    required>
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-3">
                                <label for="peso" class="form-label">Peso en libras</label>
                                <input type="number" min="0.01" step="0.10" max="99999.99" class="form-control"
                                    id="peso" name="peso" required>
                            </div>
                            <div class="col-md-1"></div>
                            <div class="col-md-4">
                                <label for="color" class="form-label">Color</label>
                                <input type="text" class="form-control" id="color" name="color">
                            </div>
                        </div>
                        <div class="row md-3">
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    <label for="flexSwitchCheckDefault" class="form-label">¿Tiene alguna enfermedad
                                        crónica?</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="exampleRadios"
                                            id="exampleRadios2" value="no" checked>
                                        <label class="form-check-label" for="exampleRadios2">NO</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="exampleRadios"
                                            id="exampleRadios1" value="si">
                                        <label class="form-check-label" for="exampleRadios1">SI</label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <label for="enfermedad_cronica" class="form-label">Describa la enfermedad</label>
                                <input type="text" class="form-control" id="enfermedad_cronica" maxlength="254"
                                    name="enfermedad_cronica">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-7">
                                <div class="row mb-3">
                                    <div class="col-md-5">
                                        <label for="especie" class="form-label">Especie</label>
                                        <select class="form-select" id="especie" name="especie_id" required>
                                            <option value="" selected disabled>Elija una especie</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2"></div>
                                    <div class="col-md-5">
                                        <label for="genero" class="form-label">Género</label>
                                        <select class="form-select" id="genero" name="genero">
                                            <option value="" selected disabled>Elija un género</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-12">
                                        <label for="formFile" class="form-label">Foto</label>
                                        <input class="form-control" type="file" id="formFile" name="foto"
                                            accept="image/*" onchange="uploadImage(event)">
                                        <input type="hidden" id="foto_ruta" name="foto_ruta">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5 px-md-5 px-lg-6">
                                <img id="previewImage" src="/public/images/default.jpg"
                                    class="img-fluid rounded mx-auto d-block" alt="...">
                            </div>
                        </div>
                        <div class="row justify-content-center">
                            <div class="col-12 col-md-2">
                                <button type="button" id="btn-actualizar" class="btn btn-primary w-100">Actualizar</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const mascotaDetalles = document.getElementById('mascotaDetalles');
            const radioSi = document.getElementById('exampleRadios1');
            const radioNo = document.getElementById('exampleRadios2');
            const enfermedadInput = document.getElementById('enfermedad_cronica');
            const btnActualizar = document.getElementById('btn-actualizar');
            
            // Recuperar la información de la mascota desde sessionStorage
            const mascota = JSON.parse(sessionStorage.getItem('mascotaSeleccionada'));
            // Función para habilitar o deshabilitar el campo de entrada
            function toggleEnfermedadInput() {
                if (radioSi.checked) {
                    enfermedadInput.disabled = false;
                    enfermedadInput.setAttribute('required', 'required');
                } else {
                    enfermedadInput.disabled = true;
                    enfermedadInput.value = '';
                    enfermedadInput.removeAttribute('required');
                }
            }

            // Ejecutar la función al cargar la página para establecer el estado inicial
            toggleEnfermedadInput();

            // Agregar eventos de cambio a los radio buttons
            radioSi.addEventListener('change', toggleEnfermedadInput);
            radioNo.addEventListener('change', toggleEnfermedadInput);

            // Función para calcular la edad
            function calcularEdad(fechaNacimiento) {
                const hoy = new Date();
                const nacimiento = new Date(fechaNacimiento);
                let edad = hoy.getFullYear() - nacimiento.getFullYear();
                const mes = hoy.getMonth() - nacimiento.getMonth();

                if (mes < 0 || (mes === 0 && hoy.getDate() < nacimiento.getDate())) {
                    edad--;
                }
                if (edad === 1) {
                    return (edad + ' año');
                }
                else {
                    return (edad + ' años');
                }


            }
            // Función para formatear la fecha en formato YYYY-MM-DD
            function formatearFecha(fecha) {
                const fechaObj = new Date(fecha);
                const year = fechaObj.getFullYear();
                const month = ('0' + (fechaObj.getMonth() + 1)).slice(-2);
                const day = ('0' + fechaObj.getDate()).slice(-2);
                return `${year}-${month}-${day}`;
            }

            if (mascota) {
                mascotaDetalles.innerHTML = `
                    <div class="col-md-4 text-center">
                        <img src="${mascota.foto}" alt="${mascota.nombre}" class="img-fluid rounded mb-3" style="max-width: 250px;">
                    </div>
                    <div class="col-md-8 d-flex align-items-center">
                        <div class="w-100">
                            <h2 class="fw-bold text-uppercase text-center w-100 ">${mascota.nombre}</h2>
                            <p><strong>Especie:</strong> ${mascota.nombre_especie}</p>
                            <p><strong>Raza:</strong> ${mascota.raza}</p>
                            <p><strong>Género:</strong> ${mascota.nombre_genero}</p>
                            <p><strong>Fecha de Nacimiento:</strong> ${new Date(mascota.fecha_nacimiento).toLocaleDateString()} (${calcularEdad(mascota.fecha_nacimiento)})</p>
                            <p><strong>Color:</strong> ${mascota.color}</p>
                            <p><strong>Peso:</strong> ${mascota.peso} lbs.</p>
                            <p><strong>Enfermedad Crónica:</strong> ${mascota.enfermedad_cronica || 'N/A'}</p>
                            <p>
                                <button class="btn btn-warning me-2" data-bs-toggle="modal" data-bs-target="#registroModal">Editar</button>
                                <button class="btn btn-danger" id="btn-eliminar">Eliminar</button>
                            </p>
                        </div>
                    </div>
                `;
                console.log(mascota)
                // Agregar el evento click al botón de editar después de generar el contenido
                document.querySelector('.btn-warning').addEventListener('click', () => {
                    // Llenar el formulario con los datos de la mascota
                    document.getElementById('nombre_mascota').value = mascota.nombre;
                    document.getElementById('raza').value = mascota.raza;
                    document.getElementById('fecha_nacimiento').value = formatearFecha(mascota.fecha_nacimiento); // Formatear la fecha antes de asignarla
                    document.getElementById('peso').value = mascota.peso;
                    document.getElementById('color').value = mascota.color;
                    document.getElementById('enfermedad_cronica').value = mascota.enfermedad_cronica;
                    document.getElementById('previewImage').src = mascota.foto;

                    // Cargar y seleccionar especies y géneros
                    cargarEspecies(mascota.especie_id);
                    cargarGeneros(mascota.genero_id);
                });
            } else {
                mascotaDetalles.innerHTML = '<p class="text-danger text-center">No se pudo cargar la información de la mascota.</p>';
            }

            btnActualizar.addEventListener('click', async (event) => {
    event.preventDefault();

    const fotoRuta = document.getElementById('previewImage').src;
    let fullPath = document.getElementById('previewImage').src;
    let url = new URL(fullPath);
    let localPath = url.pathname; // Esto te dará la ruta relativa sin el dominio //

    // Crear el objeto formData
    const formData = {
        nombre: document.getElementById('nombre_mascota').value,
        especie_id: document.getElementById('especie').value,
        raza: document.getElementById('raza').value,
        genero_id: document.getElementById('genero').value,
        fecha_nacimiento: document.getElementById('fecha_nacimiento').value,
        color: document.getElementById('color').value,
        peso: document.getElementById('peso').value,
        foto: localPath,
        enfermedad_cronica: document.getElementById('enfermedad_cronica').value,
        propietario_id: <%= propietarioId %> // Usar el propietarioId desde la sesión
    };

    // Extraer el mascota_id para usarlo en la URL
    const mascota_id = mascota.mascota_id;

    try {
        const response = await fetch(`/mis-mascotas/actualizar/${mascota_id}`, { // Incluye el mascota_id en la URL
            method: 'PUT', 
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData) // Enviar el formData sin el mascota_id
        });

        if (response.ok) {
            const result = await response.json();
            toastr.success('Mascota actualizada exitosamente');
            console.log('Respuesta de la API:', result);

            

          // Esperar 3 segundos (3000 ms) antes de redirigir
          setTimeout(() => {
            // Cerrar el modal
            const modalElement = document.getElementById('registroModal');
            const modal = bootstrap.Modal.getInstance(modalElement);
            modal.hide();

            // Limpiar el formulario
            document.getElementById('regForm').reset();
            document.getElementById('previewImage').src = '/public/images/default.jpg'; // Restablecer la imagen a la predeterminada

            // Forzar eliminación del backdrop
            document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
                window.location.href = '/mias-mascotas';
            }, 3000);

        } else {
            const errorResult = await response.json();
            toastr.error('Error al actualizar la mascota: ' + errorResult.message);
        }
    } catch (error) {
        toastr.error('Error de conexión con la API');
    }
});
const btnEliminar = document.getElementById('btn-eliminar');

btnEliminar.addEventListener('click', async (event) => {
    event.preventDefault();
    const mascota_id = mascota.mascota_id;

    // Mostrar la alerta de confirmación
    Swal.fire({
        title: '¿Estás seguro de eliminar la mascota?',
        text: "No podrás revertir esta acción",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/mis-mascotas/eliminar/${mascota_id}`, {
                    method: 'PUT', 
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    Swal.fire(
                        'Eliminada',
                        'La mascota ha sido eliminada.',
                        'success'
                    );

                    // Esperar 2 segundos (2000 ms) antes de redirigir
                    setTimeout(() => {
                        window.location.href = '/mias-mascotas';
                    }, 2000);

                } else {
                    const errorResult = await response.json();
                    Swal.fire(
                        'Error',
                        'Error al eliminar la mascota: ' + errorResult.message,
                        'error'
                    );
                }
            } catch (error) {
                Swal.fire(
                    'Error',
                    'Error de conexión con la API',
                    'error'
                );
            }
        }
    });
});



        });


        function cargarEspecies(especieIdSeleccionada) {
            fetch('/mascotas/especies')
                .then(response => response.json())
                .then(data => {
                    const especieSelect = document.getElementById('especie');
                    especieSelect.innerHTML = '<option value="" selected disabled>Elija una especie</option>';
                    data.forEach(especie => {
                        let option = document.createElement('option');
                        option.value = especie.especie_id;
                        option.textContent = especie.nombre_especie;
                        if (especie.especie_id == especieIdSeleccionada) {
                            option.selected = true;
                        }
                        especieSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error al cargar las especies:', error));
        }

        function cargarGeneros(generoIdSeleccionado) {
            fetch('/mascotas/generos')
                .then(response => response.json())
                .then(data => {
                    const generoSelect = document.getElementById('genero');
                    generoSelect.innerHTML = '<option value="" selected disabled>Elija un género</option>';
                    data.forEach(genero => {
                        let option = document.createElement('option');
                        option.value = genero.genero_id;
                        option.textContent = genero.nombre_genero;
                        if (genero.genero_id == generoIdSeleccionado) {
                            option.selected = true;
                        }
                        generoSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error al cargar los generos:', error));
        }
        async function uploadImage(event) {
            const fileInput = event.target;
            const formData = new FormData();
            formData.append('foto', fileInput.files[0]);

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    toastr.error('Error al subir la imagen');
                    return null;
                }

                const data = await response.json();
                const previewImage = document.getElementById('previewImage');
                previewImage.src = data.filePath;  // Actualiza la imagen de vista previa
                document.getElementById('foto_ruta').value = data.filePath;  // Guarda la ruta en un campo oculto

                return data.filePath;
            } catch (error) {
                console.error('Error al subir la imagen:', error);
                toastr.error('Error al subir la imagen');
                return null;
            }
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>